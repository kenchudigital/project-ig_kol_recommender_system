from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import json
import time
import csv
import pandas as pd
from webdriver_manager.chrome import ChromeDriverManager
from gcloud import storage

# section 0: web driver setting

options = webdriver.ChromeOptions()
options.add_argument("--headless")
options.add_argument("disable-infobars")
options.add_argument("start-maximized")
options.add_argument('--disable-gpu')
options.add_argument("--disable-dev-shm-usage")
options.add_argument('--no-sandbox') 
# options.add_argument('user-agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko)"')
options.add_experimental_option("detach", True)

s= Service(ChromeDriverManager().install()) #PATH
# s = Service("/app/chromedriver") #PATH
driver = webdriver.Chrome(service=s, options=options)
actions = ActionChains(driver=driver)

print("section 0: web driver setting - Finished")

# -------------- Cookies FOR LOGIN ----------------

with open ('cookies_jar.json') as f:
    cookies = json.load(f)

driver = webdriver.Chrome(options=options, service=s)

driver.get("https://www.instagram.com/accounts/login/?hl=zh-tw")

# YOU NEED TO DELETE THE "sameSite" Value Pair in JSON file
for cookie in cookies:
    driver.add_cookie(cookie)
driver.refresh()

# -------------- ANTI PREVENT BOT  --------------
time.sleep(5)

# close_pop = WebDriverWait(driver, 5).until(
#     EC.element_to_be_clickable((By.XPATH, '//button[contains(text(), \'蝔滚���滩牧\')]'))
# )
# close_pop.click()

# -------------- Login first time --------------

try:
    driver.find_element(By.CSS_SELECTOR, "input[type='text']").send_keys('test_for_code2', Keys.TAB, 'kenchu456', Keys.ENTER)
except Exception as e:
    print(e, 'may already login')

# --------------- Other Function ---------------

def convert_number(x):
    try:
        x = x
        if 'k' in x:
            return int(float(x.replace('k', '')) * 1000)
        elif 'k' in x:
            return int(float(x.replace('K', '')) * 1000)
        elif 'm' in x:
            return int(float(x.replace('m', '')) * 1000000)
        elif 'M' in x:
            return int(float(x.replace('M', '')) * 1000000)
        elif ',' in x:
            return int(float(x.replace(',', '')))
        else:
            return int(x)
    except Exception as e:
        print(e, ' convert_number error')

print("section 1: Go to the webpage - Finished")

# section 2: go to the fan page which selected

# ------------- Name OF KOL -------------

time.sleep(5)

selected_kol = "nwuuu"
driver.get("https://www.instagram.com/{}".format(selected_kol))

print(f"section 2: Go to {selected_kol} fan page - Finished")

# section 3: copy the target following list
time.sleep(3)

link1 = "a[href='/{}/following/']".format(selected_kol)
# link1 = "a[href='/{}/followers/']".format(selected_kol)

elem_following = driver.find_element(By.CSS_SELECTOR, link1)
elem_following.click()

print("section 3: copy the target following list - finished")

# section 4a: Define the web element
time.sleep(1)
link2 = link1 + ' > div > span'

no_of_following = driver.find_element(By.CSS_SELECTOR, link2).text
no_of_following = convert_number(no_of_following)
print(f"There is {no_of_following} items")

# section 4b: Click the pop up once time
time.sleep(1)
go_pop = driver.find_element(By.CSS_SELECTOR, "div[class='PZuss']")
go_pop.click()

print("section 4: Define the web element * other setup - finished")

# section 5: Scrolling Down

time.sleep(3)

pop_up_window = WebDriverWait(
    driver, 2).until(EC.element_to_be_clickable(
        (By.XPATH, "//div[@class='isgrP']")))

print(f"Starting to scroll... it needs about {(no_of_following//4 + 20)} seconds")

try:
    for x in range(no_of_following//4 + 20):
        driver.execute_script(
                'arguments[0].scrollTop = arguments[0].scrollTop + arguments[0].offsetHeight;', pop_up_window)
        time.sleep(0.85)
        print(x)
except Exception as e:
    print(e, 'Instagram Scroll Down')

print("section 5: Scrolling Down - finished")

# section 6: Copying
list_for_followed = []
y = 0

for y in range(no_of_following):
    try:
        list_of_element = "div[class=\'PZuss\'] > li:nth-child(" + str((y+1)) + ")"
        a = driver.find_element(By.CSS_SELECTOR, list_of_element).text.split()[:1]
        print(f"a = {a}")
        list_for_followed.append(a)
        print(f"y = {y}")
        # print(list_for_followed)
    except Exception as e:
        print(e, f'{y} is unfound')

print(f"There are {len(list_for_followed)} items")

print("section 6: Copying - finished")

# gcloud setting
client = storage.Client.from_service_account_json('alpine-freedom-346707-ee6c1a5cbd5f.json')
bucket = client.get_bucket('dataproc-staging-us-central1-151287915422-novabmnn')
# change the file name
blob = bucket.blob('list_for_followed.csv')

df = pd.DataFrame(list_for_followed, columns=["column"])
df.to_csv('list_for_followed.csv', index=False)
# upload file which file name is ...
blob.upload_from_filename('list_for_followed.csv')

print("section 7: Copying to csv file - finished")